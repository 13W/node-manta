#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var once = require('once');
var restify = require('restify');
var vasync = require('vasync');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});



///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function list(opts, cb) {
        cb = once(cb);
        fs.readdir(opts.source, function (err, files) {
                if (err) {
                        cb(err);
                        return;
                }

                vasync.forEachParallel({
                        func: function stat(f, _cb) {
                                _cb = once(_cb);
                                var f2 = opts.source + '/' + f;
                                fs.stat(f2, function (err2, stats) {
                                        if (err2) {
                                                _cb(err2);
                                                return;
                                        }

                                        if (stats.isFile()) {
                                                opts.files.push({
                                                        file: f2,
                                                        size: stats.size
                                                });
                                                _cb();
                                        } else if (stats.isDirectory()) {
                                                opts.dirs.push(f2);
                                                list({
                                                        files: opts.files,
                                                        dirs: opts.dirs,
                                                        source: f2
                                                }, _cb);
                                        }
                                });
                        },
                        inputs: files
                }, cb)
        });
}


function parseOptions() {
        var option;
        var opts = {
                headers: {}
        };
        var parser = new getopt.BasicParser('hvc:k:u:a:H:p:',
                                            process.argv);
        var tmp;

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'c':
                        opts.copies = parseInt(option.optarg, 10);
                        break;

                case 'h':
                        usage();
                        break;

                case 'H':
                        if (option.optarg.indexOf(': ') === -1) {
                                usage('headers must be in the format of: ' +
                                      '[header] + ": " + [value]');
                        }
                        var p = option.optarg.split(': ');
                        opts.headers[p[0]] = p.slice(1).join(': ');
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.parallel = parseInt(option.optarg, 10);
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        if (!opts.url && !process.env.MANTA_URL)
                usage('url is a required argument');

        if (!opts.user && !process.env.MANTA_USER)
                usage('account is a required argument');

        if (!opts.keyId && !process.env.MANTA_KEY_ID)
                usage('keyId is a required argument');

        if (parser.optind() >= process.argv.length)
                usage('missing required arguments: "source"');
        if ((parser.optind() + 1) >= process.argv.length)
                usage('missing required arguments: "path"');

        opts.keyId = opts.keyId || process.env.MANTA_KEY_ID;
        opts.url = opts.url || process.env.MANTA_URL;
        opts.user = opts.user || process.env.MANTA_USER;

        var tmp = process.argv.slice(parser.optind());
        opts.source = path.normalize(tmp[0]);
        opts.path = path.normalize(tmp[1]);

        return (opts);
}


function printEntry(obj) {
        console.log('%j', obj);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-c copies] [-u url] [-k keyId] ';
        str += 'directory manta_path';
        console.error(str);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

var _options = parseOptions();
var _client = manta.createClient({
        connectTimeout: 1000,
        log: LOG,
        retry: false,
        sign: manta.cliSigner({
                keyId: _options.keyId,
                log: LOG,
                user: _options.user
        }),
        url: _options.url,
        headers: _options.headers,
        user: _options.user
});

ifError(manta.assertPath(_options.path, true));

_options.dirs = [_options.source];
_options.files = [];
list(_options, function (err) {
        ifError(err);

        var dq = new manta.Queue({
                limit: 1,
                worker: function (d, cb) {
                        var p = _options.path + '/' + d;
                        _client.mkdir(p, function (err) {
                                if (err) {
                                        cb(err);
                                        return;
                                }
                                var next = _options.dirs.shift();
                                if (next) {
                                        dq.push(next);
                                } else {
                                        dq.close();
                                }
                                cb();
                        });
                }
        });

        function pushFiles() {
                var fq = new manta.Queue({
                        limit: _options.parallel || 5,
                        worker: function put(opts, cb) {
                                cb = once(cb);

                                var p = _options.path + '/' + opts.file;
                                var _opts = {
                                        copies: _options.copies,
                                        size: opts.size
                                };
                                var stream = fs.createReadStream(opts.file);
                                stream.pause();
                                stream.once('open', function () {
                                        _client.put(p, stream, _opts, cb);
                                });
                        }
                });
                fq.once('end', process.exit.bind(process, 0));

                _options.files.forEach(function (f) {
                        fq.push(f);
                });
        }

        if (_options.dirs.length) {
                dq.once('end', pushFiles);
                _options.dirs.sort();
                var _d = _options.dirs.shift()
                dq.push(_d);
        } else {
                dq.close();
                pushFiles();
        }
});
