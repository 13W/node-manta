#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var once = require('once');
var restify = require('restify');
var vasync = require('vasync');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  directory   (required) local directory to sync',
        '  path        (required) Manta destination path',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -c copies   number of copies of each object to make (default 2)',
        '  -d depth    how deep to recurse on local sync',
        '  -H header   add a header',
        '              repeat option to specify multiple headers',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -p parallel limit on number of concurrent operations (default 5)',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function list(opts, callback) {
        callback = once(callback);

        fs.readdir(opts.source, function (read_err, files) {
                if (read_err) {
                        callback(read_err);
                        return;
                }

                vasync.forEachParallel({
                        func: function stat(f, cb) {
                                cb = once(cb);
                                f = opts.source + '/' + f;
                                var f2 = path.resolve(f);
                                fs.stat(f2, function (err, stats) {
                                        if (err) {
                                                cb(err);
                                                return;
                                        }

                                        if (opts.depth >= 1) {
                                                var r = opts.root;
                                                var tmp = path.relative(r, f2);
                                                tmp = tmp.split('/');
                                                if (tmp.length > opts.depth) {
                                                        cb();
                                                        return;
                                                }
                                        }

                                        if (stats.isFile()) {
                                                opts.files.push({
                                                        file: f,
                                                        size: stats.size
                                                });
                                                cb();
                                        } else if (stats.isDirectory()) {
                                                opts.dirs.push(f);
                                                list({
                                                        depth: opts.depth,
                                                        dirs: opts.dirs,
                                                        files: opts.files,
                                                        root: opts.root,
                                                        source: f
                                                }, cb);
                                        } else {
                                                cb();
                                        }
                                });
                        },
                        inputs: files
                }, callback);
        });
}


function parseOptions() {
        var option;
        var opts = {
                depth: 0,
                headers: {}
        };
        var parser = new getopt.BasicParser('hvc:d:k:u:a:H:p:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'c':
                        opts.copies = parseInt(option.optarg, 10);
                        break;

                case 'd':
                        opts.depth = parseInt(option.optarg, 10);
                        break;

                case 'h':
                        usage();
                        break;

                case 'H':
                        if (option.optarg.indexOf(': ') === -1) {
                                usage('headers must be in the format of: ' +
                                      '[header] + ": " + [value]');
                        }
                        var p = option.optarg.split(': ');
                        opts.headers[p[0]] = p.slice(1).join(': ');
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.parallel = parseInt(option.optarg, 10);
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required arguments: "source"');
        if ((parser.optind() + 1) >= process.argv.length)
                usage('missing required arguments: "path"');

        var tmp = process.argv.slice(parser.optind());
        opts.source = path.normalize(tmp[0]);
        opts.path = path.normalize(tmp[1]);

        return (opts);
}


function printEntry(obj) {
        console.log('%j', obj);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-c copies] [-d depth] [-u url] [-k keyId] ';
        str += '[-H header] [-p parallel] directory path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

(function main() {
        var options = parseOptions();
        options.log = LOG;
        var client = manta.createBinClient(options);

        ifError(manta.assertPath(options.path, true));

        var dirQ = new manta.Queue({
                limit: 1,
                worker: function (d, cb) {
                        var p = options.path + '/' + d;
                        client.mkdir(p, function (err) {
                                if (err) {
                                        cb(err);
                                        return;
                                }
                                var next = options.dirs.shift();
                                if (next) {
                                        dirQ.push(next);
                                } else {
                                        dirQ.close();
                                }
                                cb();
                        });
                }
        });

        var fileQ = new manta.Queue({
                limit: options.parallel || 5,
                worker: function put(opts, cb) {
                        cb = once(cb);

                        var p = options.path + '/' + opts.file;
                        var _opts = {
                                copies: options.copies,
                                size: opts.size
                        };
                        var stream = fs.createReadStream(opts.file);
                        stream.pause();
                        stream.once('open', function () {
                                client.put(p, stream, _opts, cb);
                        });
                }
        });
        fileQ.once('end', process.exit.bind(process, 0));

        options.dirs = [options.source];
        options.files = [];
        options.root = path.resolve(options.source);

        list(options, function (err) {
                ifError(err);

                if (options.dirs.length) {
                        dirQ.once('end', function pushFiles() {
                                options.files.forEach(function (f) {
                                        fileQ.push(f);
                                });
                        });

                        options.dirs.sort();
                        dirQ.push(options.dirs.shift());
                } else {
                        dirQ.close();
                        pushFiles();
                }
        });
})();
