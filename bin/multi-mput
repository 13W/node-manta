#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});



///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                headers: {}
        };
        var parser = new getopt.BasicParser('hvc:d:k:u:a:H:p:',
                                            process.argv);
        var tmp;

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'c':
                        opts.copies = parseInt(option.optarg, 10);
                        break;

                case 'd':
                        opts.dir = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'H':
                        if (option.optarg.indexOf(': ') === -1) {
                                usage('headers must be in the format of: ' +
                                      '[header] + ": " + [value]');
                        }
                        var p = option.optarg.split(': ');
                        opts.headers[p[0]] = p.slice(1).join(': ');
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.parallel = parseInt(option.optarg, 10);
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (!opts.dir)
                usage('dir is a required argument');

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path"');

        opts.path = path.normalize(process.argv[parser.optind()]);
        return (opts);
}


function printEntry(obj) {
        console.log('%j', obj);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-c copies] [-u url] [-k keyId] -d dir path';
        console.error(str);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

var _options = parseOptions();
_options.log = LOG;
var _client = manta.createBinClient(_options);

ifError(manta.assertPath(_options.path, true));

fs.readdir(_options.dir, function (err, files) {
        ifError(err);

        var queue = new manta.Queue({
                limit: _options.parallel || 5,
                worker: function put(f, cb) {
                        var f2 = _options.dir + '/' + f;
                        fs.stat(f2, function (err2, stats) {
                                ifError(err2);

                                if (!stats.isFile()) {
                                        cb();
                                        return;
                                }

                                var opts = {
                                        copies: _options.copies,
                                        size: stats.size
                                };

                                var p = _options.path + '/' + f;
                                var stream = fs.createReadStream(f2);
                                stream.pause();
                                stream.on('open', function () {
                                        _client.put(p, stream, opts, cb);
                                });
                        });
                }
        });

        files.forEach(function (f) {
                queue.push(f);
        });

        queue.close();
        queue.once('end', function () {
                process.exit(0);
        });
});
