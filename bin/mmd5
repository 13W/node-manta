#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');
var vasync = require('vasync');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});



///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var idx;
        var option;
        var opts = {};
        var parser = new getopt.BasicParser('vhk:u:a:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path(s)"');

        idx = parser.optind();
        while (idx < process.argv.length) {
                if (!opts.hasOwnProperty('paths')) {
                        opts.paths = [];
                }

                opts.paths.push(path.normalize(process.argv[idx]));
                idx++;
        }

        return (opts);
}


function printEntry(obj) {
        console.log('%j', obj);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] path [path...]';
        console.error(str);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

var _options = parseOptions();
_options.log = LOG;
var _client = manta.createBinClient(_options);
var _out = process.stdout;
_get_md5s();

function _get_md5s() {
        var errors = 0;
        var idx;
        var path;
        var queue;

        _out.on('end', process.exit.bind(null, 0));

        queue = vasync.queue(_get_md5, 1);

        function _on_done() {
                if (errors > 0) {
                        process.exit(1);
                }
        }

        function _err(path, message) {
                console.error('mmd5: ' + path + ': ' + message);
                errors++;
        }

        function _get_md5(path, callback) {
                var error = manta.assertPath(path, true);

                if (error) {
                        _err(path, error.message);
                        callback();
                        return;
                }

                _client.info(path, function (err, info) {
                        var md5;
                        if (err) {
                                if (err.message.length === 0) {
                                        err.message = err.code;
                                }
                                _err(path, err.message);
                                callback();
                                return;
                        }

                        if (info.hasOwnProperty('md5')) {
                                md5 = (new Buffer(info.md5, 'base64'));
                                _out.write(md5.toString('hex') + '  '
                                        + path + '\n');
                                callback();
                        } else if (info.type === 'application/x-json-stream; '
                                + 'type=directory') {

                                _err(path, 'is a directory');
                                callback();
                        } else {
                                _err(path, 'is missing md5');
                                callback();
                        }
                });
        }

        for (idx in _options.paths) {
                path = _options.paths[idx];
                if (idx == (_options.paths.length - 1)) {
                        queue.push(path, _on_done);
                } else {
                        queue.push(path);
                }
        }
}
