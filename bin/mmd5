#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');
var vasync = require('vasync');

var manta = require('../lib');



///--- Globals

var DIR_CT = 'application/x-json-stream; type=directory';
var HAD_ERR = false;
var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});



///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                parallel: 10
        };
        var parser = new getopt.BasicParser('vhk:u:a:p:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.parallel = parseInt(opts.parallel, 10);
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        opts.log = LOG;

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path(s)"');

        opts.paths = process.argv.slice(parser.optind()).map(function (p) {
                var _p = path.normalize(p);
                ifError(manta.assertPath(_p, true));
                return (_p);
        });
        return (opts);
}


function printEntry(p, md5) {
        var _md5 = new Buffer(md5, 'base64');
        console.log(_md5.toString('hex') + '  ' + p);
}


function printError(p, err) {
        HAD_ERR = true;
        var msg = err ? (err.message || err) : '';
        console.error('mmd5: ' + p + ': ' + msg);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-p parallel] ';
        str += 'path [path...]';
        console.error(str);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

(function main() {
        var options = parseOptions();
        var client = manta.createBinClient(options);
        var queue = new manta.Queue({
                limit: options.parallel,
                worker: function getMD5(p, cb) {
                        client.info(p, function (err, info) {
                                if (err) {
                                        printError(p, err);
                                } else if (info.hasOwnProperty('md5')) {
                                        printEntry(p, info.md5);
                                } else if (info.type === DIR_CT) {
                                        printError(p, p + ' is a directory');
                                } else {
                                        printError(p, 'missing MD5');
                                }
                                cb();
                        });
                }
        });

        queue.once('end', function () {
                process.exit(HAD_ERR ? 1 : 0);
        });

        options.paths.forEach(function (p) {
                queue.push(p);
        });

        queue.close();
})();
