#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var carrier = require('carrier');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  jobId       (required) UUID of job to add keys to',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -b batch    Number of keys to sumbit per batch (default is 1000)',
        '  -e          end job input after submitting keys',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.stack);
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                batch: 1000,
                log: LOG,
                parallel: 3
        };
        var parser = new getopt.BasicParser('vehk:u:a:b:p:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'b':
                        opts.batch = parseInt(option.optarg, 10);
                        break;

                case 'e':
                        opts.end = true;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.parallel = parseInt(option.optarg, 10);
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }
        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "jobId"');

        opts.id = process.argv[parser.optind()];

        return (opts);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-e] jobId';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

(function main() {
        process.stdin.setEncoding('utf8');

        var options = parseOptions();
        var carry = carrier.carry(process.stdin);
        var client = manta.createBinClient(options);
        var keys = [];
        var queue = new manta.Queue({
                limit: options.parallel,
                worker: function addKeys(batch, cb) {
                        client.addJobKey(options.id, batch, {}, function (err) {
                                if (err) {
                                        cb(err);
                                        return;
                                }
                                console.error('added %d keys...', batch.length);
                                cb();
                        });
                }
        });

        carry.on('line', function onLine(l) {
                keys.push(l);
                if (keys.length === options.batch) {
                        queue.push(keys.slice(0));
                        keys.length = 0;
                }
        });

        carry.once('end', function onInputEnd() {
                if (keys.length > 0)
                        queue.push(keys);

                queue.close();
                queue.once('end', function () {
                        if (!options.end) {
                                process.exit(0);
                        }

                        client.endJob(options.id, function (err) {
                                ifError(err);

                                process.exit(0);
                        });
                });
        });

        process.stdin.resume();
})();
