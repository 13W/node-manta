#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var carrier = require('carrier');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg= [
        'OPTIONS:',
        '  jobId       (required) UUID of job to add keys to',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -e          end job input after submitting keys',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.stack);
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
        };
        var parser = new getopt.BasicParser('vehk:u:a:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'e':
                        opts.end = true;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }
        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "jobId"');

        opts.id = process.argv[parser.optind()];

        return (opts);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-e] jobId';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

var _options = parseOptions();
_options.log = LOG;
var _client = manta.createBinClient(_options);

process.stdin.setEncoding('utf8');
var _keys = [];
var _carry = carrier.carry(process.stdin);

var _pending = 0;
var _total = 0;

_carry.on('line', function (l) {
        _total++;
        _keys.push(l);
        if (_keys.length === 1000) {
                var batch = _keys.slice(0);
                _keys.length = 0;
                _pending++;
                _client.addJobKey(_options.id, batch, {}, function (err) {
                        ifError(err);
                        _pending--;
                        console.log('added %d keys...', batch.length);
                });
        }
});

_carry.on('end', function () {
        var opts = {
                end: _options.end || false
        };

        _pending++;
        _client.addJobKey(_options.id, _keys, opts, function (err) {
                ifError(err);

                _pending--;
                if (_pending === 0) {
                        function wait() {
                                if (_pending > 0) {
                                        setTimeout(wait, 100);
                                        return;
                                }
                                if (_total > _keys.length) {
                                        console.log('added %s (total) keys',
                                                    _total);
                                }
                        }
                        setTimeout(wait, 100);
                } else {
                        console.log('added %d keys...', _keys.length);
                }
        });
});

process.stdin.resume();
