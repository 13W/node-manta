#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  path        (required) Manta object to remove',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -p paral    level of parallelism for recursive rm (default 100)',
        '  -r          remove directories and their contents recursively',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                log: LOG,
                parallelism: 100
        };
        var parser = new getopt.BasicParser('vrhk:p:u:a:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;
                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.parallelism = parseInt(option.optarg, 10);
                        break;

                case 'r':
                        opts.recurse = true;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path"');

        opts.path = path.normalize(process.argv[parser.optind()]);
        ifError(manta.assertPath(opts.path, true));
        return (opts);
}


function printEntry(obj) {
        console.log('%j', obj);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-r] path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

(function main() {
        var options = parseOptions();
        var client = manta.createBinClient(options);
        var p = options.path;

        function cb(err) {
                ifError(err);
                client.close();
        }

        if (options.recurse) {
                client.rmr(p, options, cb);
        } else {
                client.info(p, function (err, info) {
                        if (err) {
                                client.get(p, function (err2) {
                                        ifError(err2);
                                        // We *shouldn't* ever hit this...
                                        ifError(err);
                                        client.close();
                                });
                                return;
                        }

                        if (info.extension === 'directory') {
                                console.error(p + ' is not an object');
                                process.exit(1);
                        }

                        client.unlink(p, cb);
                });
        }
})();
