#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['json', 'j'],
            type: 'bool',
            help: 'output in JSON'
        },
        {
            names: ['limit', 'l'],
            type: 'positiveInteger',
            help: 'limit the number of results returned',
            helpArg: 'LIMIT'
        },
        {
            names: ['marker', 'm'],
            type: 'string',
            help: 'start listing from MARKER',
            helpArg: 'MARKER'
        }
    ])
});



///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function ls(client, p, options, cb) {
        var last;
        var opts = {
                log: LOG,
                query: {}
        };
        var seen = 0;

        if (options.limit)
                opts.query.limit = options.limit;
        if (options.marker)
                opts.query.marker = options.marker;
        if (options.type) {
                opts.query[options.type] = true;
        }

        client.ls(p, opts, function (err, res) {
                ifError(err);

                function onEntry(e) {
                        last = e.name;
                        seen++;
                        if (e.name !== options.marker)
                                printEntry(e, options.json);
                }

                res.on('directory', onEntry);
                res.on('object', onEntry);
                res.once('error', cb);
                res.once('end', function (http_res) {
                        var rss = parseInt(http_res.headers['result-set-size'],
                                           10);
                        if (options.limit !== undefined ||
                            seen >= rss || !last) {
                                cb(null);
                                return;
                        }

                        var o = {
                                marker: last,
                                type: options.type
                        };
                        ls(client, p, o, cb);
                });
        });
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH]...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, '[PATH]...');

    var paths;
    if (opts._args.length < 1) {
        paths = ['/' + opts.account + '/stor'];
    } else {
        paths = opts._args.slice(0).map(function (p) {
            var _p = path.normalize(p);
            ifError(manta.assertPath(_p, true));
            return (_p);
        });
    }

    opts.paths = paths;

    return (opts);
}


function printEntry(obj, json) {
        if (obj.headers)
                delete obj.headers;

        if (json) {
            console.log('%j', obj);
        } else {
            console.log('%s%s',
                        obj.name,
                        obj.type === 'directory' ? '/' : '');
        }
}



///--- Mainline

(function main() {
        var done = 0;
        var options = parseOptions();
        var client = manta.createBinClient(options);

        function cb(err) {
                ifError(err);

                if (++done === options.paths.length)
                        client.close();
        }

        options.paths.forEach(function (p) {
                client.info(p, function (info_err, info) {
                        if (info_err) {
                                client.get(p, cb);
                        } else if (info.extension === 'directory') {
                                ls(client, p, options, cb);
                        } else {
                                printEntry(info, options.json);
                                cb();
                        }
                });
        });
})();
