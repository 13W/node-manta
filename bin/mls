#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  path        (required) Manta directory to list',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -l limit    only list up to <limit> entries',
        '  -m marker   start listing from <marker>',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode,',
        '  -1          output only the file name'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function ls(client, p, options, cb) {
        var last;
        var opts = {
                log: LOG,
                query: {}
        };
        var seen = 0;

        if (options.limit)
                opts.query.limit = options.limit;
        if (options.marker)
                opts.query.marker = options.marker;
        if (options.type) {
                opts.query[options.type] = true;
        }

        client.ls(p, opts, function (err, res) {
                ifError(err);

                function onEntry(e) {
                        last = e.name;
                        seen++;
                        if (e.name !== options.marker)
                                printEntry(e, options.human);
                }

                res.on('directory', onEntry);
                res.on('object', onEntry);
                res.once('error', cb);
                res.once('end', function (http_res) {
                        var rss = parseInt(http_res.headers['result-set-size'],
                                           10);
                        if (options.limit !== undefined ||
                            seen >= rss || !last) {
                                cb(null);
                                return;
                        }

                        var o = {
                                marker: last,
                                type: options.type
                        };
                        ls(client, p, o, cb);
                });
        });
}


function parseOptions() {
        var option;
        var opts = {
                log: LOG
        };
        var parser = new getopt.BasicParser('1vha:k:l:m:u:t:', process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case '1':
                        opts.human = true;
                        break;

                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'l':
                        opts.limit = parseInt(option.optarg, 10);
                        break;

                case 'm':
                        opts.marker = option.optarg;
                        break;

                case 't':
                        opts.type = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        var paths;
        if (parser.optind() >= process.argv.length) {
                var user = opts.user || process.env.MANTA_USER;
                if (!user) {
                        usage('account is a required argument with no path');
                }
                paths = ['/' + user + '/stor'];
        } else {
                paths = process.argv.slice(parser.optind()).map(function (p) {
                        var _p = path.normalize(p);
                        ifError(manta.assertPath(_p, true));
                        return (_p);
                });
        }

        opts.paths = paths;
        return (opts);
}


function printEntry(obj, human) {
        if (obj.headers)
                delete obj.headers;

        if (human) {
                console.log('%s%s',
                            obj.name,
                            obj.type === 'directory' ? '/' : '');
        } else {
                console.log('%j', obj);
        }
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += '[-v] [-a account] [-u url] [-k keyId] [-l limit] ' +
                '[-m marker] path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

(function main() {
        var done = 0;
        var options = parseOptions();
        var client = manta.createBinClient(options);

        function cb(err) {
                ifError(err);

                if (++done === options.paths.length)
                        client.close();
        }

        options.paths.forEach(function (p) {
                client.info(p, function (info_err, info) {
                        if (info_err) {
                                client.get(p, cb);
                        } else if (info.extension === 'directory') {
                                ls(client, p, options, cb);
                        } else {
                                printEntry(info, options.human);
                                cb();
                        }
                });
        });
})();
