#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var url = require('url');

var mod_path = require('path');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var once = require('once');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');

var http = require('http');
var https = require('https');
var tar = require('tar');

///--- Globals

var IN_PROGRESS = {};
var LOG = bunyan.createLogger({
        name: mod_path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});
var MAX_SOCKETS = parseInt(process.env.MANTA_MAX_SOCKETS || 1000, 10);

var optionsMsg = [
        'OPTIONS:',
        '  -f file     (required) local tar file to upload',
        '  path        (required) Manta destination path',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -c copies   number of copies to make (default 2)',
        '  -H header   add a header',
        '              repeat option to specify multiple headers',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -p paral    level of parallelism (default 10)',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');



///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                headers: {},
                parallelism: 25
        };
        var parser = new getopt.BasicParser('hvc:f:k:u:a:H:p:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'c':
                        opts.copies = parseInt(option.optarg, 10);
                        break;

                case 'f':
                        opts.file = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'H':
                        if (option.optarg.indexOf(': ') === -1) {
                                usage('headers must be in the format of: ' +
                                      '[header] + ": " + [value]');
                        }
                        var p = option.optarg.split(': ');
                        opts.headers[p[0]] = p.slice(1).join(': ');
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'p':
                        opts.parallelism = parseInt(option.optarg, 10);
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        opts.log = LOG;

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (!opts.file)
                usage('file is a required argument');

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path"');

        opts.path = mod_path.normalize(process.argv[parser.optind()]);
        ifError(manta.assertPath(opts.path, true));
        return (opts);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + mod_path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-c copies] [-u url] [-k keyId]';
        str += ' [-H header] -f file path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}


function put(client, path, stream, opts, cb) {
        client.put(path, stream, opts, function (err) {
                if (!err || !err.body ||
                    (err.body.code != 'ParentNotDirectory' &&
                    err.body.code != 'DirectoryDoesNotExist')) {
                        cb(err);
                        return;
                }

                /*
                 * Our put failed.  If the put failed because we were missing
                 * a parent directory, we'll try to make the directory --
                 * assuring that we don't have two outstanding requests to
                 * make the same directory.
                 */
                var dir = path.match(/.*\//)[0];

                function postmkdir(_err) {
                        if (_err) {
                                cb(_err);
                                return;
                        }

                        client.put(path, stream, opts, cb);
                }

                if (IN_PROGRESS[dir]) {
                        IN_PROGRESS[dir].push(postmkdir);
                        return;
                }

                IN_PROGRESS[dir] = [ postmkdir ];

                client.mkdirp(dir, function (_err) {
                        IN_PROGRESS[dir].forEach(function (post) {
                                post.call(this, _err);
                        });

                        delete IN_PROGRESS[dir];
                });
        });
}


/*
 * Absent intermediate streams for each entry that could be paused without
 * pausing the tar parsing, each worker needs to take its own pass through
 * the tarball.
 */
function worker(client, tarball, callback) {
        var entry = 0;
        var inflight = 0;
        var stream = fs.createReadStream(tarball.file);
        var pipe = stream.pipe(tar.Parse());
        var options = tarball.options;

        callback = once(callback);

        function cb() {
                if (inflight > 0)
                        return;

                callback();
        }

        pipe.once('end', cb);
        pipe.on('entry', function (e) {
                if (e.props.size === 0)
                        return;

                if (entry++ < tarball.next)
                        return;

                tarball.next = entry;
                e.pause();

                var p = options.path + '/' + e.props.path;
                var o = {
                        copies: options.copies,
                        size: e.props.size
                };
                inflight++;
                put(client, p, e, o, function (err) {
                        ifError(err);

                        console.log(p);
                        inflight--;
                        cb();
                });
        });
}



///--- Mainline

(function main() {
        var options = parseOptions();

        http.globalAgent.maxSockets = MAX_SOCKETS;
        https.globalAgent.maxSockets = MAX_SOCKETS;

        var client = manta.createBinClient(options);
        var done = 0;
        var tarball = {
                file: options.file,
                options: options,
                next: 0
        };

        function cb() {
                if (++done === options.parallelism)
                        client.close();
        }

        for (var i = 0; i < options.parallelism; i++)
                worker(client, tarball, cb);
})();
