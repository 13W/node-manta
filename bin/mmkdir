#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  path        (required) Manta directory to create',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -H header   add a header',
        '              repeat option to specify multiple headers',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -p          create intermediate directories as required',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                headers: {}
        };
        var parser = new getopt.BasicParser('pvhk:u:a:H:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'H':
                        if (option.optarg.indexOf(': ') === -1) {
                                usage('headers must be in the format of: ' +
                                      '[header] + ": " + [value]');
                        }
                        var p = option.optarg.split(': ');
                        opts.headers[p[0]] = p.slice(1).join(': ');
                        break;


                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.recurse = true;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        opts.log = LOG;

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path"');

        opts.paths = process.argv.slice(parser.optind()).map(function (_path) {
                var _p = path.normalize(_path);
                ifError(manta.assertPath(_p, true));
                return (_p);
        });

        return (opts);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-p] [-H header] path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
(function main() {
        var done = 0;
        var options = parseOptions();
        var client = manta.createBinClient(options);

        function cb(err) {
                ifError(err);

                if (++done === options.paths.length)
                        client.close();
        }

        options.paths.forEach(function (p) {
                if (options.recurse) {
                        client.mkdirp(p, cb);
                } else {
                        client.mkdir(p, cb);
                }
        });

})();
