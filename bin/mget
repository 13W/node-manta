#!/usr/bin/env node
// -*- mode: js -*-
// vim: set expandtab sw=8:
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  path         (required) Manta path of object to fetch',
        '  -a account   Manta account (specify this or export MANTA_USER)',
        '  -f file      write to <file> instead of stdout',
        '  -k keyId     SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -q           quiet mode (no progress bar)',
        '  -u url       Manta URL (specify this or export MANTA_URL)',
        '  -v           verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {};
        var parser = new getopt.BasicParser('vqhf:k:u:a:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'f':
                        opts.file = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'q':
                        opts.quiet = true;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path"');

        opts.paths = process.argv.slice(parser.optind()).map(function (p) {
                var _p = path.normalize(p);
                ifError(manta.assertPath(_p, true));
                return (_p);
        });
        return (opts);
}


function printEntry(obj) {
        console.log('%j', obj);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-f file] path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

(function main() {
        var opts = parseOptions();
        opts.log = LOG;
        var client = manta.createBinClient(opts);
        var i = -1;
        var out = process.stdout;
        var drawProgressBar = true;

        function get() {
                var p = opts.paths[++i];
                if (!p) {
                        return;
                }

                client.get(p, function (err, stream, res) {
                        ifError(err);

                        var bar;
                        if (drawProgressBar) {
                                var baropts = {
                                        filename: p
                                };
                                var clen =
                                        parseInt(res.headers['content-length'],
                                                 10);
                                if (clen >= 0) {
                                        baropts.size = clen;
                                } else {
                                        baropts.nosize = true;
                                }
                                bar = new manta.ProgressBar(baropts);
                        }

                        stream.on('data', function (data) {
                                if (bar)
                                        bar.advance(data.length);
                                out.write(data);
                        });
                        stream.on('end', function () {
                                if (bar)
                                        bar.end();
                                get();
                        });
                });
        }

        if (opts.quiet || !Boolean(process.stderr.isTTY))
                drawProgressBar = false;

        if (opts.file) {
                out = fs.createWriteStream(opts.file);
                out.on('open', get.bind(this));
        } else {
                if (out.isTTY) {
                        /*
                         * If we're outputting to a TTY, then we don't
                         * want to draw the progress bar as it will likely
                         * clobber the output.
                         */
                        drawProgressBar = false;
                }
                get();
        }
})();
