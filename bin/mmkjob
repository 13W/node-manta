#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg= [
        'OPTIONS:',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -c count    the number of reducers for each phase (default 1)',
        '              repeat option for multiple reduce phases',
        '              affects respective reduce phases in the order specified',
        '  -d memory   amount of memory available for all reduce phases',
        '  -f manifest create job from file <manifest> instead of arguments',
        '  -i jobId    pipe input from job <jobId>',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -m map      map phase',
        '              repeat option to specify multiple map phases',
        '  -n name     job name',
        '  -s asset    make <asset> available as an asset for all phases',
        '              repeat option to specify multiple assets',
        '  -r reduce   reduce phase',
        '              repeat option to specify multiple reduce phases',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.stack);
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                map: [],
                reduce: [],
                count: [],
                assets: []
        };
        var parser = new getopt.BasicParser('vha:c:d:f:i:k:m:n:r:s:u:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'c':
                        opts.count.push(parseInt(option.optarg, 10));
                        break;

                case 'd':
                        opts.memory = parseInt(option.optarg, 10);
                        break;

                case 'h':
                        usage();
                        break;

                case 'f':
                        opts.manifest = option.optarg
                        break;

                case 'i':
                        opts.input = option.optarg;
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'm':
                        opts.map.push({
                                exec: option.optarg,
                                type: 'storage-map'
                        });
                        break;

                case 'n':
                        opts.name = option.optarg;
                        break;

                case 'r':
                        opts.reduce.push({
                                exec: option.optarg,
                                type: 'reduce'
                        });
                        break;
                case 's':
                        opts.assets.push(option.optarg);
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }


        opts.name = opts.name || uuid.v4().substr(0, 7);

        if (opts.input) {
                opts.input = /\/\w+\/jobs\/\w+/.test(opts.input) ?
                        opts.input :
                        '/' + (opts.user || process.env.MANTA_USER) +
                        '/jobs/' + opts.input
        }

        if (!opts.map.length && !opts.reduce.length && !opts.manifest)
                usage('at least one map or reduce task must be specified');

        return (opts);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-i jobid]';
        str += '[-m map] [-r reduce] [-s assets] [-d memory] [-n name] ';
        str += '[-c count] [-f job_manifest]';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

var _options = parseOptions();
_options.log = LOG;
var _client = manta.createBinClient(_options);
var _job;

function _cb(err, jobId) {
        ifError(err);

        console.log(jobId);
        process.exit(0);
}

if (_options.manifest) {
        var _tmp = fs.readFileSync(path.normalize(_options.manifest), 'utf8');
        _client.createJob(JSON.parse(_tmp), _cb);
} else {
        var _job = {
                name: _options.name,
                input: _options.input,
                phases: [],
        };
        _options.map.forEach(function (e) {
                if (_options.assets)
                        e.assets = _options.assets;
                _job.phases.push(e);
        });
        _options.reduce.forEach(function (e) {
                if (_options.assets)
                        e.assets = _options.assets;
                if (_options.count && _options.count.length > 0)
                        e.count = _options.count.shift();
                if (_options.memory)
                        e.memory = _options.memory;

                _job.phases.push(e);
        });
        _client.createJob(_job, _cb);
}
