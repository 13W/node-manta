#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -l limit    maximum number of jobs to return',
        '  -m marker   start job listing with this jobId',
        '  -s state    only list jobs in state <state>',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.stack);
                process.exit(1);
        }
}


function jobs(client, options, cb) {
        var last;
        var opts = {
                query: {}
        };
        var seen = 0;

        if (options.limit)
                opts.query.limit = options.limit;
        if (options.marker)
                opts.query.marker = options.marker;
        if (options.state)
                opts.query.state = options.state;

        client.listJobs(opts, function (err, res) {
                ifError(err);

                res.on('job', function (j) {
                        last = j.id;
                        seen++;
                        if (j.id !== options.marker)
                                console.log('%j', j);
                });

                res.once('error', cb);
                res.once('end', function (http_res) {
                        var rss = parseInt(http_res.headers['result-set-size'],
                                           10);
                        if (options.limit !== undefined ||
                            seen >= rss || !last) {
                                cb(null);
                                return;
                        }

                        var o = {
                                limit: options.limit,
                                marker: last
                        };
                        jobs(client, o, cb);
                });
        });
}


function parseOptions() {
        var option;
        var opts = {
                log: LOG
        };
        var parser = new getopt.BasicParser('vhk:m:u:a:s:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'm':
                        opts.marker = option.optarg;
                        break;

                case 's':
                        opts.state = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        return (opts);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-m marker] [-s state]';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

(function main() {
        var options = parseOptions();

        var client = manta.createBinClient(options);
        var opts = {
                marker: options.marker,
                state: options.state
        };

        jobs(client, opts, function (err) {
                ifError(err);
                process.exit(0);
        });
})();
