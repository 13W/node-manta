#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: restify.bunyan.serializers
});
var METHODS = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE'];

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['expires', 'e'],
            type: 'positiveInteger',
            help: 'expiration time (epoch). Default is 1hr from now.',
            'default': (new Date().getTime() / 1000) + 3600,
            helpArg: 'EXPIRATION'
        },
        {
            names: ['method', 'm'],
            type: 'string',
            help: 'HTTP method to support',
            'default': 'GET',
            helpArg: 'METHOD'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error(err.toString());
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'path...');

    opts.method = opts.method.toUpperCase();
    if (opts.method && METHODS.indexOf(opts.method) === -1) {
        manta.cli_usage(OPTIONS_PARSER,
                        'method invalid: ' + opts.method,
                        'path...');
    }

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');

    opts.paths = opts._args;

    return (opts);
}



///--- Mainline

(function main() {
    var options = parseOptions();

    manta.loadSSHKey(options.keyId, function (load_err, key) {
        ifError(load_err);

        var alg = / DSA /.test(key) ? 'DSA-SHA1' : 'RSA-SHA256';
        var signer = manta.privateKeySigner({
            key: key,
            keyId: options.keyId,
            log: options.log,
            user: options.account
        });

        options.paths.forEach(function (p) {
            var opts = {
                algorithm: alg,
                expires: options.expires,
                host: url.parse(options.url).host,
                keyId: options.keyId,
                log: options.log,
                method: options.method || 'GET',
                path: p,
                sign: signer,
                user: options.account
            };
            manta.signUrl(opts, function (err, resource) {
                ifError(err);
                console.log(options.url + resource);
            });
        });

    });
})();
