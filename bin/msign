#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});


var optionsMsg= [
        'OPTIONS:',
        '  path        (required) Manta path to sign',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -e expire   expiration date (epoch time)',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -m method   method (default GET)',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');

///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {};
        var parser = new getopt.BasicParser('vhk:m:u:a:e:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'e':
                        opts.expires = parseInt(option.optarg, 10);
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'm':
                        opts.method = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        // Doesn't use the common checkBinEnv because it doesn't
        // instantiate a manta client.
        if (!opts.url && !process.env.MANTA_URL)
                usage('url is a required argument');

        if (!opts.user && !process.env.MANTA_USER)
                usage('account is a required argument');

        if (!opts.keyId && !process.env.MANTA_KEY_ID)
                usage('keyId is a required argument');

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "path"');

        opts.keyId = opts.keyId || process.env.MANTA_KEY_ID;
        opts.path = path.normalize(process.argv[parser.optind()]);
        opts.url = opts.url || process.env.MANTA_URL;
        opts.user = opts.user || process.env.MANTA_USER;
        return (opts);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-u url] [-k keyId] [-e expires] ';
        str += ' [-m method] path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

var _options = parseOptions();

manta.loadSSHKey(_options.keyId, function (load_err, key) {
        ifError(load_err);

        var opts = {
                algorithm: / DSA /.test(key) ? 'DSA-SHA1' : 'RSA-SHA256',
                expires: _options.expires,
                host: url.parse(_options.url).host,
                keyId: _options.keyId,
                log: LOG,
                method: _options.method || 'GET',
                path: _options.path,
                sign: manta.privateKeySigner({
                        key: key,
                        keyId: _options.keyId,
                        log: LOG,
                        user: _options.user
                }),
                user: _options.user
        };

        manta.signUrl(opts, function (err, resource) {
                ifError(err);
                console.log(_options.url + resource);
        });
});
