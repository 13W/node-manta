#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var http = require('http');
var https = require('https');
var url = require('url');

var bunyan = require('bunyan');
var clone = require('clone');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var CLIENT;
var LOG = bunyan.createLogger({
        name: require('path').basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});
var MAX_SOCKETS = parseInt(process.env.MANTA_MAX_SOCKETS || 1000, 10);



///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {};
        var parser = new getopt.BasicParser('vha:k:l:n:o:p:u:s:t:',
                                            process.argv);
        var tmp;

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'l':
                        opts.limit = parseInt(option.optarg, 10);
                        break;

                case 'n':
                        opts.name = new RegExp(option.optarg);
                        break;

                case 'o':
                        opts.offset = parseInt(option.optarg, 10);
                        break;

                case 'p':
                        opts.parallel = parseInt(option.optarg, 10);
                        break;

                case 's':
                        opts.size = parseInt(option.optarg, 10);
                        break;

                case 't':
                        opts.type = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        if (!opts.url && !process.env.MANTA_URL)
                usage('url is a required argument');

        if (!opts.user && !process.env.MANTA_USER)
                usage('account is a required argument');

        if (!opts.keyId && !process.env.MANTA_KEY_ID)
                usage('keyId is a required argument');


        opts.path = path;
        opts.keyId = opts.keyId || process.env.MANTA_KEY_ID;
        opts.url = opts.url || process.env.MANTA_URL;
        opts.user = opts.user || process.env.MANTA_USER;

        if (parser.optind() >= process.argv.length) {
                opts.path = '/' + opts.user + '/stor';
        } else {
                var path = require('path');
                opts.path = path.normalize(process.argv[parser.optind()]);
        }

        return (opts);
}


function printEntry(opts, obj) {
        if (opts.name && !opts.name.test(obj.name))
                return;
        if (opts.size && obj.type === 'object' && opts.size > obj.size)
                return;
        if (opts.type && opts.type === 'd' && obj.type !== 'directory')
                return;

        console.log(opts.path + '/' + obj.name);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + require('path').basename(process.argv[1]);
        str += '[-v] [-a account] [-u url] [-k keyId] [-l limit] [-n name] ';
        str += '[-o offset] [-s size] path';
        console.error(str);
        process.exit(msg ? 1 : 0);
}



///--- Mainline
// Leading _ to avoid scope conflicts in functions

http.globalAgent.maxSockets = MAX_SOCKETS;
https.globalAgent.maxSockets = MAX_SOCKETS;

var _options = parseOptions();
ifError(manta.assertPath(_options.path, true));

CLIENT = manta.createClient({
        connectTimeout: 4000,
        log: LOG,
        retry: false,
        sign: manta.cliSigner({
                keyId: _options.keyId,
                log: LOG,
                user: _options.user
        }),
        url: _options.url,
        user: _options.user
});

var Q = new manta.Queue({
        limit: _options.parallel || 10,
        worker: function ls(options, cb) {
                var last;
                var opts = {
                        query: {}
                };
                var seen = 0;

                if (options.limit)
                        opts.query.limit = options.limit;
                if (options.marker)
                        opts.query.marker = options.marker;

                CLIENT.ls(options.path, opts, function (err, res) {
                        ifError(err);

                        res.on('directory', function onDirectory(dir) {
                                last = dir.name;
                                seen++;

                                var _opts = clone(options);
                                _opts.client = options.client
                                _opts.path = options.path + '/' + dir.name;
                                if (_opts.type === 'd')
                                        printEntry(options, dir);

                                Q.push(_opts);
                        });
                        res.on('object', function onObject(obj) {
                                last = obj.name;
                                seen++;
                                if (obj.name !== options.marker)
                                        printEntry(options, obj);
                        });
                        res.once('error', ifError);
                        res.once('end', function (http_res) {
                                var l = options.limit;
                                var rss = http_res.headers['result-set-size'];
                                rss = parseInt(rss, 10);

                                if (l !== undefined || seen >= rss || !last) {
                                        cb();
                                } else {
                                        var o = {
                                                marker: last,
                                                path: options.path,
                                                type: options.type
                                        };
                                        Q.push(o);
                                }
                        });
                });
        }
});


CLIENT.info(_options.path, function (err, info) {
        if (err) {
                CLIENT.get(_options.path, function (err2) {
                        ifError(err2);
                        // We *shouldn't* ever hit this...
                        ifError(err);
                });
                return;
        }

        if (info.extension === 'directory') {
                Q.push(_options);
        } else {
                printEntry(_options, info);
                process.exit(1);
        }
});
