#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var http = require('http');
var https = require('https');
var url = require('url');

var assert = require('assert-plus');
var bunyan = require('bunyan');
var clone = require('clone');
var getopt = require('posix-getopt');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var CLIENT;
var LOG = bunyan.createLogger({
        name: require('path').basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});
var MAX_SOCKETS = parseInt(process.env.MANTA_MAX_SOCKETS || 1000, 10);

var optionsMsg = [
        'OPTIONS:',
        '  path         (required) Manta path to search under',
        '  -a account   Manta account (specify this or export MANTA_USER)',
        '  -k keyId     SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -l limit     limit the number of results returned in a batch',
        '  -n name      only list objects that match /name/',
        '  -p parallel  limit on number of concurrent operations (default 10)',
        '  -s size      only list objects greater than <size> bytes',
        '  -t type      only list objects of type <type>',
        '               <type> can be "d" for directory, or "o" for object',
        '  -u url       Manta URL (specify this or export MANTA_URL)',
        '  -v           verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function parseOptions() {
        var option;
        var opts = {
                log: LOG,
                parallel: 100
        };

        var parser = new getopt.BasicParser('vha:k:l:n:p:u:s:t:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'h':
                        usage();
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'l':
                        opts.limit = parseInt(option.optarg, 10);
                        break;

                case 'n':
                        opts.name = new RegExp(option.optarg);
                        break;

                case 'p':
                        opts.parallel = parseInt(option.optarg, 10);
                        break;

                case 's':
                        opts.size = parseInt(option.optarg, 10);
                        break;

                case 't':
                        opts.type = option.optarg;
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        opts.path = path;

        if (parser.optind() >= process.argv.length) {
                var user = opts.user || process.env.MANTA_USER;
                if (!user) {
                        usage('account is a required argument with no path');
                }
                opts.path = '/' + user + '/stor';
        } else {
                var path = require('path');
                opts.path = path.normalize(process.argv[parser.optind()]);
        }

        return (opts);
}


function printEntry(opts, obj) {
        if (opts.name && !opts.name.test(obj.name))
                return;
        if (opts.size && obj.type === 'object' && opts.size > obj.size)
                return;
        if (opts.type && opts.type === 'd' && obj.type !== 'directory')
                return;
        if (opts.type && opts.type === 'o' && obj.type !== 'object')
                return;

        console.log(opts.path + (obj.name ? ('/' + obj.name) : ''));
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + require('path').basename(process.argv[1]) + ' ';
        str += '[-v] [-a account] [-u url] [-k keyId] [-l limit] [-n name] ';
        str += '[-s size] [-t type] [-p parallel] path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

http.globalAgent.maxSockets = MAX_SOCKETS;
https.globalAgent.maxSockets = MAX_SOCKETS;

(function main() {
        var options = parseOptions();
        ifError(manta.assertPath(options.path, true));

        var client = manta.createBinClient(options);

        var queue = new manta.Queue({
                limit: options.parallel,
                worker: function ls(opts, cb) {
                        var last;
                        var _opts = {
                                query: {}
                        };

                        if (options.limit)
                                _opts.query.limit = options.limit;
                        if (opts.marker)
                                _opts.query.marker = opts.marker;

                        client.ls(opts.path, _opts, function (err, res) {
                                ifError(err);

                                res.on('directory', function onDirectory(dir) {
                                        if (dir.name === opts.marker)
                                                return;

                                        printEntry(opts, dir);

                                        var p = opts.path + '/' + dir.name;
                                        last = dir.name;
                                        queue.push({
                                                client: client,
                                                name: options.name,
                                                path: p,
                                                size: options.size,
                                                type: options.type
                                        });
                                });

                                res.on('object', function onObject(obj) {
                                        if (obj.name === opts.marker)
                                                return;

                                        last = obj.name;
                                        printEntry(opts, obj);
                                });

                                res.once('error', ifError);

                                res.once('end', function onEnd(http_res) {
                                        if (last) {
                                                queue.push({
                                                        marker: last,
                                                        name: options.name,
                                                        path: opts.path,
                                                        type: options.type
                                                });
                                        }
                                        cb();
                                });
                        });
                }
        });

        client.info(options.path, function (err, info) {
                if (err) {
                        client.get(options.path, function (err2) {
                                ifError(err2);
                                // We *shouldn't* ever hit this...
                                ifError(err);
                        });
                        return;
                }

                if (info.extension === 'directory') {
                        queue.push(options);
                } else {
                        printEntry(options, {});
                        process.exit(1);
                }
        });

        queue.once('drain', function () {
                queue.once('end', client.close.bind(client));
                queue.close();
        });
})();
