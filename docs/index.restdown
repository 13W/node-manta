---
title: Node SDK for Joyent Manta
markdown2extras: wiki-tables, code-friendly
apisections: Directories, Objects, Links
---

# Manta

This is the reference documentation for the Manta [Node.js](http://nodejs.org/)
SDK.Manta is Joyent's Object Storage Service, which enables you to store data in
the cloud and process that data using a built-in compute facility.

This doucment explains the Node.js API interface and describes the various
operations, structures and error codes.

## Conventions

Any content formatted like this:

    $ curl is https://manta.joyent.com

is a command-line example that you can run from a shell. All other examples and
information are formatted like this:

    client.ls('/jill/stor/foo', function (err, res) {
	    assert.ifError(err);
        ...
    });

# Installation

First, install the SDK as usual via [npm](http://npmjs.org/); the package name
in npm is `manta`.  You may optionally want to install the package globally with
the `-g` flag to npm, as this should place the node-manta CLI in your `$PATH`.

    $ npm install git+ssh://@git.joyent.com:node-manta.git

Once you've installed the npm package, there a few environment variables that
are useful to set if you plan to work with the CLI; these environment variables
are not strictly necessary, but they will save you passing in command line
options on each invocation.  The environment variables that can be set are your
SmartDataCenter login name and ssh public key fingerprint (manta uses the same
credentials), and the URL of which manta endpoint you wish to interact with.
The commands below assume that your SSH public key is the default `id_rsa.pub`
key, located in your `$HOME/.ssh` directory (on Mac OS X and UNIX environments).
The shell command below simply parses the SSH fingerprint and sets that in the
requisite environment variable.

    $ export MANTA_KEY_ID=`ssh-keygen -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`
    $ export MANTA_URL=https://manta.bh1-kvm1.joyent.us
    $ export MANTA_USER=jill

# Creating a Client

In order to create a client, use the `createClient` API available on the
top-level of the SDK.  The example below assumes that you are using the
environment variables you set above.

    var assert = require('assert');
    var manta = require('manta');

    var client = manta.createClient({
        sign: manta.privateKeySigner({
            key: process.env.HOME + '/.ssh/id_rsa',
            keyId: process.env.MANTA_KEY_ID,
            user: process.env.MANTA_USER
        }),
        user: process.env.MANTA_USER,
        url: process.env.MANTA_URL
    });
    assert.ok(client);

    console.log('client setup: %s', client.toString());

The options you can pass into `createClient` are:

||**Name**||**JS Type**||**Description**||
||connectTimeout||Number||_optional_: amount of milliseconds to wait for acquiring a socket to Manta; defaults to `0` (infinity)||
||log||Object||_optional_: `bunyan` logger; default is at level `fatal` and writes to `stderr`||
||headers||Object||_optional_: HTTP headers to send on *all* requests||
||sign||Function||*required*: see `authenticating requests` below||
||url||String||*required*: URL to interact with Manta on||
||user||String||_optional_: `login` name to use when interacting with the `jobs` API||

## Authenticating Requests

TODO

## Common API options

All APIs in `node-manta` have the last two options of the function set to
`options` and `callback`, where `options` is (usually) optional.  For example,
these two calls to `info` are identical:

    var opts = {};
    client.info('/jill/stor/foo', opts, function (err, info) {
	    assert.ifError(err);
		...
    });

    client.info('/jill/stor/foo', function (err, info) {
	    assert.ifError(err);
		...
    });

If you are not passing in explicit options, the second form is always there for
convenience.  All API operations allow you to pass in a standard set of options,
which are:

||**Name**||**JS Type**||**Description**||
||headers||Object||Any HTTP headers to be included in this request||
||req_id||String||A unique identifier for this request (SHOULD be a uuid)||
||query||Object||A key/value set of parameters to be encoded on the URL's query string||

You can always override any `node-manta` behavior by passing in explicit HTTP
headers, but in most cases, you should just use the "higher-level" parameters
available in the specific API you are interested in.

## Common Callback Parameters

In almost all cases (the exception being the "streaming" APIs like `ls`)
callbacks will be of the form `function (error, result)`, where `err` is either
a JavaScript
[Error](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error)
object or `null`.  `result` is a standard node
[http.ClientResponse](http://nodejs.org/api/http.html#http_http_clientresponse)
object, where you will be able to access HTTP headers, response codes, etc.
Note that if there was an HTTP response code >= 400, then `err` will be present
and filled in with the Manta error code and message (see `errors`).

## Errors

TODO

# API

## client.mkdir(path, [options], callback)

Create or overwrite a directory at `path`. `mkdir` is really a `PUT` operation,
so it's slightly different semantics than `mkdir(2)` in POSIX (meaning, you
can call mkdir on the same path twice).  There is no return value besides a
potentinal error.

        client.mkdir('/jill/stor/foo', function (err) {
		    assert.ifError(err);
			...
        });

### Inputs

||**Name**||**JS Type**||**Description**||
||directory||String||*(required)* A full Manta path to create||
||options||Object||_(optional)_ optional overrides for this request||
||callback||Function||*(required)* callback of the form `fn(err, res)`||


## client.mkdirp(path, [options], callback)

Same as `mkdir`, except, mkdirp creates intermediate directories as required.

        client.mkdirp('/jill/stor/foo/bar/baz', function (err) {
            assert.ifError(err);
			...
        });

### Inputs

||**Name**||**JS Type**||**Description**||
||directory||String||*(required)* A full Manta path to create||
||options||Object||_(optional)_ optional overrides for this request||
||callback||Function||*(required)* callback of the form `fn(err, res)`||


## client.ls(path, [options], callback)

Lists directory contents.  This API will return an `EventEmitter` that will emit
a stream of entries as they are returned from the server.  You can listen for
two distinct types `directory`; records of type `object` will have slightly more
information in the records.  Both records will have a `type` field in them.
Otherwise, the returned entries are described below.  Optional pagination
parameters can be included in the options block, and act as you would expect.
There is a server-enforced limit of 1000 entries per list request, which is also
the default limit, however you can request a smaller size if need be.  You can
also choose to only receive objects of a certain type.

    var opts = {
		offset: 0,
	    limit: 256,
		type: 'object'
	};
    client.ls('/', opts, function (err, res) {
        assert.ifError(err);

        res.on('object', function (obj) {
            console.log(obj);
	    });

        res.on('directory', function (dir) {
            console.log(dir);
        });

        res.once('error', function (err) {
		    console.error(err.stack));
			process.exit(1);
        });

        res.once('end', function () {
            console.log('all done');
        });
    });

### Inputs

||**Name**||**JS Type**||**Description**||
||directory||String||*(required)* A full Manta path to list||
||options||Object||_(optional)_ optional overrides for this request||
||callback||Function||*(required)* callback of the form `fn(err, res)`||

### Output Objects

Each output object will be of this schema:

    {
	    name: 'foo',                            // basename of the entry
		etag: 'AABBCC',                         // only set on objects
		size: 1234,                             // only set on objects; valueOf(content-length)
		type: 'object',                         // one of directory || object
		mtime: '2012-11-09T12:34:56Z'           // ISO8601 timestamp of the last update time
    }


## client.put(path, stream, options, callback)

Creates or overwrites an (object) key.  You pass it in a ReadableStream (note
that stream *must* support pause/resume), and upon receiving a 100-continue
from manta, the bytes get blasted up.

Unlike the other APIs, you also will need to pass in an options object, that
contains, at minimum, a 'size' attribute. Additionally, you can/should pass
in an 'md5' attribute, and you can pass a 'type' attribute which is really
the content-type.  If you don't pass in 'type', this API will try to guess it
based on the name of the object (using the extension).  Lastly, you can pass
in a 'copies' attribute, which sets the number of full object copies to make
server side (default is 2).

However, like the other APIs, you can additionally pass in extra headers, etc.
in the options object as well.   In the case of objects this is particularly
useful for setting CORS headers, for example.

There is no return value besides error reporting.

Note: The example below uses the `memorystream` module from NPM.

    var crypto = require('crypto');
    var MemoryStream = require('memorystream');

    var message = 'Hello World'
	var opts = {
	    copies: 3,
		headers: {
		    'access-control-allow-origin': '*',
			'access-control-allow-methods': 'GET'
		},
		md5: crypto.createHash('md5').update(chunk).digest('base64')
	    size: Buffer.byteLength(message),
		type: 'text/plain'
    };
    var stream = new MemoryStream();

    client.put('/jill/stor/hello_world.txt', stream, opts, function (err) {
        assert.ifError(err);
        ...
    });

    process.nextTick(function () {
	    stream.end(message));
	});

### Inputs

||**Name**||**JS Type**||**Description**||
||directory||String||*(required)* A full Manta path to read||
||stream||Stream||*(required)* An instance of a `ReadableStream`||
||options||Object||*(required)* overrides for this request; must include `size`||
||callback||Function||*(required)* callback of the form `fn(err, res)`||


## client.get(path, [options], callback)

Fetches an object back from Manta, and gives you a (standard) ReadableStream.

Note this API will validate ContentMD5, and so if the downloaded object does
not match, the stream will emit an error.

    client.get('/jill/stor/hello_world.txt', function (err, stream) {
        assert.ifError(err);

        stream.setEncoding('utf8');
		stream.on('data', function (chunk) {
		    console.log(chunk);
        });
		stream.on('end', function () {
		    ...
        });
    });

### Inputs

||**Name**||**JS Type**||**Description**||
||directory||String||*(required)* A full Manta path to create an object as||
||options||Object||_(optional)_ overrides for this request||
||callback||Function||*(required)* callback of the form `fn(err, stream)`||


## client.unlink(path, [options], callback)

Deletes an object or directory from Manta. If path points to a directory, the
directory *must* be empty.

There is no return value besides a possible error.

    client.unlink('/jill/stor/hello_world.txt', function (err) {
        assert.ifError(err);

		...
    });

### Inputs

||**Name**||**JS Type**||**Description**||
||directory||String||*(required)* A full Manta path to delete||
||options||Object||_(optional)_ overrides for this request||
||callback||Function||*(required)* callback of the form `fn(err, stream)`||
